{
  "name": "find-remove",
  "version": "0.2.5",
  "description": "recursively finds files and/or directories by filter options from a start directory onwards and deletes these according to plenty of options you can configure. useful if you want to clean up stuff within a directory in your node.js app.",
  "main": "find-remove.js",
  "author": {
    "name": "Michael Heuberger",
    "email": "michael.heuberger@binarykitchen.com"
  },
  "keywords": [
    "file",
    "remove",
    "rmdir",
    "unlink",
    "find",
    "filter",
    "recursive",
    "fs",
    "delete",
    "extension",
    "file stats"
  ],
  "dependencies": {
    "fmerge": "^1.2.0",
    "rimraf": "^2.2.0"
  },
  "devDependencies": {
    "nodeunit": "^0.9.0",
    "randomstring": "^1.0.2",
    "mkdirp": "^0.5.0",
    "async": "^0.9.0"
  },
  "engines": {
    "node": ">=0.10.24"
  },
  "scripts": {
    "test": "nodeunit tests/basics.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/binarykitchen/find-remove.git"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "4054ab4121d6a2023812bb720ffcd9a514efb092",
  "directories": {
    "test": "tests"
  },
  "readme": "# find-remove\n\n[![Build Status](https://travis-ci.org/binarykitchen/find-remove.png?branch=master)](https://travis-ci.org/binarykitchen/find-remove)\n\nrecursively finds files by filter options from a start directory onwards and deletes these. useful if you want to clean up a directory in your node.js app.\n\nyou can filter by extensions, names, level in directory structure and file creation date yeah!\n\n## installation\n\nto install find-remove, use [npm](http://github.com/isaacs/npm):\n\n    $ npm install find-remove\n\nthen in your node.js app, get reference to the function like that:\n\n```javascript\nvar findRemoveSync = require('find-remove');\n```\n\n## quick examples\n\n### delete all *.bak and *.log files within the /temp/ directory\n\n```javascript\nvar result = findRemoveSync('/temp', {extensions: ['.bak', '.log']});\n```\n\nthe return value `result` is a json object with successfully deleted files. if you output `result` to the console, you will get something like this:\n\n```\n{\n    '/tmp/haumiblau.bak': true,\n    '/tmp/dump.log': true\n}\n```\n\n### delete all files called 'dump.log' within the /temp/ directory and any of its subfolders\n\n```javascript\nvar result = findRemoveSync(rootDirectory, {files: 'dump.log'});\n```\n\n### same as above but do not delete file 'haumiblau.bak'\n\n```javascript\nvar result = findRemoveSync(rootDirectory, {files: 'dump.log', ignore: 'haumiblau.bak'});\n```\n\n### delete recursively all files called 'dump.log' AND also all files with the extension '.dmp'  within /temp/\n\n```javascript\nvar result = findRemoveSync('/tmp', {files: 'dump.log', extension: '.dmp'});\n```\n\n### delete everything inside AND including the /temp directory\n\njust call it without options because no options means nothing is filtered.\n\n```javascript\nvar result = findRemoveSync('/tmp');\n```\n\n### delete all jpg files older than one hour\n\n```javascript\nvar result = findRemoveSync('/tmp', {age: {seconds: 3600}, extensions: '.jpg'});\n```\n\n### apply filter options only for two levels inside the /temp directory\n\n```javascript\nvar result = findRemoveSync('/tmp', {maxLevel: 2, extensions: '.tmp'});\n```\n\nthis deletes any `.tmp` files up to two levels, for example:\n/tmp/level1/level2/a.tmp\n\nbut not:\n/tmp/level1/level2/level3/b.tmp\n\nwhy the heck do we have this option? because of performance. if you do not care about deep subfolders, apply that option to get a speed boost.\n\n## api\n\n### findRemoveSync(dir, options)\n\nfindRemoveSync takes any start directory and searches files from there for removal. the selection of files for removal depends on the given options. and at last, it deletes the selected files/directories.\n\n__arguments__\n\n* dir - any directory to search for files for deletion\n* options - currently two properties are supported:\n    * files - can be a string or an array of files you want to delete within `dir`. also `*.*` is allowed here if you want to remove all files (but not directories).\n    * extensions - this too, can be a string or an array of file extenstions you want to delete within `dir`\n    * ignore - useful to exclude some files. again, can be a string or an array of file names you do NOT want to delete within `dir`\n    * age.seconds - can be any float number. findRemoveSync then compares it with the file stats and deletes those with creation times older than `age.seconds`\n    * maxLevel - advanced: limits filtering to a certain level. useful for performance. recommended for crawling huge directory trees.\n    * test - advanced: set to true for a test run, meaning it does not delete anything but returns an array of files/directories it would have deleted.\n\nwhen no options are given, are undefined or null, then everything including directories are removed as if there were no filters. this also applies when only the `maxLevel` parameter is given.\n\n__returns__\n\nassociative array of files/directories that were deleted.\n\n## todo\n\n* add more filtering options (combinations, regex,  etc.)\n* have an asynchronous solution\n* use streams instead\n\n## license\n\nMIT\n",
  "bugs": {
    "url": "https://github.com/binarykitchen/find-remove/issues"
  },
  "homepage": "https://github.com/binarykitchen/find-remove",
  "_id": "find-remove@0.2.5",
  "_from": "find-remove@"
}
